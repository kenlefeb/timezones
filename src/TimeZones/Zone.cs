using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TimeZones
{
	/// <summary>
	/// Class Zone.
	/// </summary>
	public class Zone : IEquatable<Zone>
	{
		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		/// <value>The name.</value>
		public string Name { get; set; } = string.Empty;

		/// <summary>
		/// Parses the specified name.
		/// </summary>
		/// <param name="name">The name.</param>
		/// <returns>Zone.</returns>
		public static Zone Parse(string name)
		{
			return new Zone
			{
				Name = name,
			};
		}

		/// <summary>
		/// Performs an implicit conversion from <see cref="System.String" /> to <see cref="Zone" />.
		/// </summary>
		/// <param name="name">The name.</param>
		/// <returns>The result of the conversion.</returns>
		public static implicit operator Zone(string name)
		{
			return Parse(name);
		}

		/// <summary>
		/// Indicates whether the current object is equal to another object of the same type.
		/// </summary>
		/// <param name="other">An object to compare with this object.</param>
		/// <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
		/// <autogeneratedoc />
		public bool Equals(Zone? other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return string.Equals(Name, other.Name, StringComparison.CurrentCultureIgnoreCase);
		}

		/// <summary>
		/// Determines whether the specified <see cref="System.Object" /> is equal to this instance.
		/// </summary>
		/// <param name="obj">The object to compare with the current object.</param>
		/// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
		/// <autogeneratedoc />
		public override bool Equals(object? obj)
		{
			return ReferenceEquals(this, obj) || obj is Zone other && Equals(other);
		}

		/// <summary>
		/// Returns a hash code for this instance.
		/// </summary>
		/// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
		/// <autogeneratedoc />
		public override int GetHashCode()
		{
			return Name.GetHashCode();
		}

		/// <summary>
		/// Implements the == operator.
		/// </summary>
		/// <param name="left">The left.</param>
		/// <param name="right">The right.</param>
		/// <returns>The result of the operator.</returns>
		/// <autogeneratedoc />
		public static bool operator ==(Zone? left, Zone? right)
		{
			return Equals(left, right);
		}

		/// <summary>
		/// Implements the != operator.
		/// </summary>
		/// <param name="left">The left.</param>
		/// <param name="right">The right.</param>
		/// <returns>The result of the operator.</returns>
		/// <autogeneratedoc />
		public static bool operator !=(Zone? left, Zone? right)
		{
			return !Equals(left, right);
		}
	}
}

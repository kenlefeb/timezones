// /* This Source Code Form is subject to the terms of the Mozilla Public
//  * License, v. 2.0. If a copy of the MPL was not distributed with this
//  * file, You can obtain one at https://mozilla.org/MPL/2.0/.
//  */

using System.Text.RegularExpressions;

namespace TimeZones
{
	/// <summary>
	/// Collection of methods for parsing geographic coordinates.
	/// </summary>
	/// <autogeneratedoc />
	internal static class CoordinatesParser
	{
		/// <summary>
		/// Parses a single coordinate (either latitude or longitude).
		/// </summary>
		/// <param name="coordinate">The coordinate.</param>
		/// <returns>System.Double.</returns>
		/// <autogeneratedoc />
		internal static double ParseCoordinate(string coordinate)
		{
			if (coordinate.Contains("°"))
				return ParseDegreesMinutesSeconds(coordinate);
			else
				return ParseDecimalDegrees(coordinate);
		}

		/// <summary>
		/// Parses the two components (latitude and longitude).
		/// </summary>
		/// <param name="text">The text.</param>
		/// <returns>System.ValueTuple&lt;System.String, System.String&gt;.</returns>
		/// <exception cref="TimeZones.InvalidCoordinatesTextException"></exception>
		/// <autogeneratedoc />
		internal static (string latitude, string longitude) ParseComponents(string text)
		{
			var regex = new Regex(@"^(?<latitude>.*?),\s*(?<longitude>.*)$");
			var match = regex.Match(text);

			if (match.Success)
				return (match.Groups["latitude"].Value, match.Groups["longitude"].Value);

			throw new InvalidCoordinatesTextException(text);
		}

		/// <summary>
		/// Parses text that represents a decimal degrees value.
		/// </summary>
		/// <param name="coordinate">The coordinate.</param>
		/// <returns>System.Double.</returns>
		/// <exception cref="TimeZones.InvalidCoordinatesTextException"></exception>
		/// <autogeneratedoc />
		private static double ParseDecimalDegrees(string coordinate)
		{
			if (double.TryParse(coordinate, out var degrees))
				return degrees;

			var regex = new Regex(@"^(?<degrees>[\d\-\.]*)(\s+(?<ordinal>\w).*)?$");
			var match = regex.Match(coordinate);

			if (!double.TryParse(coordinate, out degrees))
				throw new InvalidCoordinatesTextException(coordinate);

			switch (match.Groups["ordinal"].Value.ToUpperInvariant())
			{
				case "N":
				case "E":
					return degrees;
				default:
					return 0 - degrees;
			}
		}

		/// <summary>
		/// Parses text that represents degrees, minutes, and seconds.
		/// </summary>
		/// <param name="coordinate">The coordinate.</param>
		/// <returns>System.Double.</returns>
		/// <exception cref="TimeZones.InvalidCoordinatesTextException"></exception>
		/// <autogeneratedoc />
		private static double ParseDegreesMinutesSeconds(string coordinate)
		{
			var regex = new Regex(@"^(?<degrees>[\d\-\.])°\s*(?<minutes>[\d\-\.])'\s*(?<seconds>[\d\-\.])""\s*(?<ordinal>\w).*$");
			var match = regex.Match(coordinate);

			if (match.Success)
			{
				var degrees = int.Parse(match.Groups["degrees"].Value);
				var minutes = int.Parse(match.Groups["minutes"].Value);
				var seconds = int.Parse(match.Groups["seconds"].Value);
				switch (match.Groups["ordinal"].Value.ToUpperInvariant())
				{
					case "N":
					case "E":
						return degrees + (minutes / 60) + (seconds / 3600);
					default:
						return 0 - (degrees + (minutes / 60) + (seconds / 3600));
				}
			}

			throw new InvalidCoordinatesTextException(coordinate);
		}
	}
}
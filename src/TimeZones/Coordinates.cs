// /* This Source Code Form is subject to the terms of the Mozilla Public
//  * License, v. 2.0. If a copy of the MPL was not distributed with this
//  * file, You can obtain one at https://mozilla.org/MPL/2.0/.
//  */

using System;

namespace TimeZones
{
	/// <summary>
	/// Represents a single geographical point.
	/// </summary>
	public class Coordinates : IEquatable<Coordinates>
	{
		/// <summary>
		/// Gets or sets the latitude.
		/// </summary>
		/// <value>The latitude.</value>
		public double Latitude  { get; set; }
		/// <summary>
		/// Gets or sets the longitude.
		/// </summary>
		/// <value>The longitude.</value>
		public double Longitude { get; set; }

		/// <summary>
		/// Parses the specified text to extract valid coordinates from any of the following formats:<br /><list type="bullet"><item>Decimal: 41.5057367,-81.6945422</item><item>Decimal &amp; Ordinal (Abbreviated): 41.5057367 N, 81.6945422 W</item><item>Decimal &amp; Ordinal: 41.5057367 North, 81.6945422 West</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes &amp; Ordinal (Abbreviated): 41° 30' 20.6532" N, 81° 41' 40.3506" W</item><item>Degrees, Minutes &amp; Ordinal: 41° 30' 20.6532" North, 81° 41' 40.3506" West</item></list>
		/// </summary>
		/// <param name="text">A textual representation of geographical coordinates.</param>
		/// <returns>Coordinates.</returns>
		public static Coordinates Parse(string text)
		{
			var ( latitude,  longitude) = CoordinatesParser.ParseComponents(text);
			return new Coordinates
			       {
					   Latitude = CoordinatesParser.ParseCoordinate(latitude),
					   Longitude = CoordinatesParser.ParseCoordinate(longitude),
			       };
		}

		/// <summary>
		/// Performs an implicit conversion to <see cref="Coordinates" /> from text in one of the following formats:<br /><list type="bullet"><item>Decimal: 41.5057367,-81.6945422</item><item>Decimal &amp; Ordinal (Abbreviated): 41.5057367 N, 81.6945422 W</item><item>Decimal &amp; Ordinal: 41.5057367 North, 81.6945422 West</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes &amp; Ordinal (Abbreviated): 41° 30' 20.6532" N, 81° 41' 40.3506" W</item><item>Degrees, Minutes &amp; Ordinal: 41° 30' 20.6532" North, 81° 41' 40.3506" West</item></list>
		/// </summary>
		/// <param name="text">A textual representation of geographical coordinates.</param>
		/// <returns>Coordinates.</returns>
		public static implicit operator Coordinates(string text)
		{
			return Coordinates.Parse(text);
		}

		/// <summary>
		/// Indicates whether the current object is equal to another object of the same type.
		/// </summary>
		/// <param name="other">An object to compare with this object.</param>
		/// <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
		/// <autogeneratedoc />
		public bool Equals(Coordinates? other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;
			return Latitude.Equals(other.Latitude) && Longitude.Equals(other.Longitude);
		}

		/// <summary>
		/// Determines whether the specified <see cref="System.Object" /> is equal to this instance.
		/// </summary>
		/// <param name="obj">The object to compare with the current object.</param>
		/// <returns><c>true</c> if the specified <see cref="System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
		/// <autogeneratedoc />
		public override bool Equals(object? obj)
		{
			return ReferenceEquals(this, obj) || obj is Coordinates other && Equals(other);
		}

		/// <summary>
		/// Returns a hash code for this instance.
		/// </summary>
		/// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
		/// <autogeneratedoc />
		public override int GetHashCode()
		{
			unchecked
			{
				return (Latitude.GetHashCode() * 397) ^ Longitude.GetHashCode();
			}
		}

		/// <summary>
		/// Implements the == operator.
		/// </summary>
		/// <param name="left">The left.</param>
		/// <param name="right">The right.</param>
		/// <returns>The result of the operator.</returns>
		/// <autogeneratedoc />
		public static bool operator ==(Coordinates? left, Coordinates? right)
		{
			return Equals(left, right);
		}

		/// <summary>
		/// Implements the != operator.
		/// </summary>
		/// <param name="left">The left.</param>
		/// <param name="right">The right.</param>
		/// <returns>The result of the operator.</returns>
		/// <autogeneratedoc />
		public static bool operator !=(Coordinates? left, Coordinates? right)
		{
			return !Equals(left, right);
		}

		/// <summary>Returns a <see cref="System.String"/> that represents this instance.</summary>
		/// <returns>A <see cref="System.String"/> that represents this instance.</returns>
		/// <autogeneratedoc />
		public override string ToString()
		{
			return CoordinatesFormatter.FormatDegreesMinutesSeconds(this);
		}
	}
}
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimeZones</name>
    </assembly>
    <members>
        <member name="T:TimeZones.Coordinates">
            <summary>
            Represents a single geographical point.
            </summary>
        </member>
        <member name="P:TimeZones.Coordinates.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:TimeZones.Coordinates.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="M:TimeZones.Coordinates.Parse(System.String)">
            <summary>
            Parses the specified text to extract valid coordinates from any of the following formats:<br /><list type="bullet"><item>Decimal: 41.5057367,-81.6945422</item><item>Decimal &amp; Ordinal (Abbreviated): 41.5057367 N, 81.6945422 W</item><item>Decimal &amp; Ordinal: 41.5057367 North, 81.6945422 West</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes &amp; Ordinal (Abbreviated): 41° 30' 20.6532" N, 81° 41' 40.3506" W</item><item>Degrees, Minutes &amp; Ordinal: 41° 30' 20.6532" North, 81° 41' 40.3506" West</item></list>
            </summary>
            <param name="text">A textual representation of geographical coordinates.</param>
            <returns>Coordinates.</returns>
        </member>
        <member name="M:TimeZones.Coordinates.op_Implicit(System.String)~TimeZones.Coordinates">
            <summary>
            Performs an implicit conversion to <see cref="T:TimeZones.Coordinates" /> from text in one of the following formats:<br /><list type="bullet"><item>Decimal: 41.5057367,-81.6945422</item><item>Decimal &amp; Ordinal (Abbreviated): 41.5057367 N, 81.6945422 W</item><item>Decimal &amp; Ordinal: 41.5057367 North, 81.6945422 West</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes: 41° 30' 20.6532",-81° 41' 40.3506"</item><item>Degrees, Minutes &amp; Ordinal (Abbreviated): 41° 30' 20.6532" N, 81° 41' 40.3506" W</item><item>Degrees, Minutes &amp; Ordinal: 41° 30' 20.6532" North, 81° 41' 40.3506" West</item></list>
            </summary>
            <param name="text">A textual representation of geographical coordinates.</param>
            <returns>Coordinates.</returns>
        </member>
        <member name="M:TimeZones.Coordinates.Equals(TimeZones.Coordinates)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Coordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Coordinates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Coordinates.op_Equality(TimeZones.Coordinates,TimeZones.Coordinates)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Coordinates.op_Inequality(TimeZones.Coordinates,TimeZones.Coordinates)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Coordinates.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents this instance.</summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
            <autogeneratedoc />
        </member>
        <member name="T:TimeZones.CoordinatesParser">
            <summary>
            Collection of methods for parsing geographic coordinates.
            </summary>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.CoordinatesParser.ParseCoordinate(System.String)">
            <summary>
            Parses a single coordinate (either latitude or longitude).
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.CoordinatesParser.ParseComponents(System.String)">
            <summary>
            Parses the two components (latitude and longitude).
            </summary>
            <param name="text">The text.</param>
            <returns>System.ValueTuple&lt;System.String, System.String&gt;.</returns>
            <exception cref="T:TimeZones.InvalidCoordinatesTextException"></exception>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.CoordinatesParser.ParseDecimalDegrees(System.String)">
            <summary>
            Parses text that represents a decimal degrees value.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
            <exception cref="T:TimeZones.InvalidCoordinatesTextException"></exception>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.CoordinatesParser.ParseDegreesMinutesSeconds(System.String)">
            <summary>
            Parses text that represents degrees, minutes, and seconds.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
            <exception cref="T:TimeZones.InvalidCoordinatesTextException"></exception>
            <autogeneratedoc />
        </member>
        <member name="T:TimeZones.Extensions">
            <summary>  Extension methods</summary>
        </member>
        <member name="M:TimeZones.Extensions.GetDecimalCount(System.Double)">
            <summary>Gets the number of significant decimal places in the value.</summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TimeZones.Finder">
            <summary>
            Class Finder.
            Implements the <see cref="T:TimeZones.IFindTimeZones" />
            </summary>
            <seealso cref="T:TimeZones.IFindTimeZones" />
        </member>
        <member name="M:TimeZones.Finder.FindTimeZone(TimeZones.Coordinates)">
            <summary>
            Finds the time zone.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>Zone.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TimeZones.IFindTimeZones">
            <summary>
            Interface IFindTimeZones
            </summary>
        </member>
        <member name="M:TimeZones.IFindTimeZones.FindTimeZone(TimeZones.Coordinates)">
            <summary>
            Finds the time zone.
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>Zone.</returns>
        </member>
        <member name="T:TimeZones.InvalidCoordinatesTextException">
            <summary>
            Exception that occurs when an attempt was made to parse geographic coordinates from text that doesn't properly represent coordinates.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.InvalidCoordinatesTextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TimeZones.InvalidCoordinatesTextException"/> class.
            </summary>
            <param name="text">The text.</param>
            <autogeneratedoc />
        </member>
        <member name="T:TimeZones.Zone">
            <summary>
            Class Zone.
            </summary>
        </member>
        <member name="P:TimeZones.Zone.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:TimeZones.Zone.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>Zone.</returns>
        </member>
        <member name="M:TimeZones.Zone.op_Implicit(System.String)~TimeZones.Zone">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:TimeZones.Zone" />.
            </summary>
            <param name="name">The name.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TimeZones.Zone.Equals(TimeZones.Zone)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Zone.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Zone.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Zone.op_Equality(TimeZones.Zone,TimeZones.Zone)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:TimeZones.Zone.op_Inequality(TimeZones.Zone,TimeZones.Zone)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
            <autogeneratedoc />
        </member>
    </members>
</doc>
